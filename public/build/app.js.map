{"version":3,"sources":["main.js","templates.js","controllers/about.controller.js","controllers/account.controller.js","controllers/editevent.controller.js","controllers/event.controller.js","controllers/example.controller.js","controllers/home.controller.js","controllers/navigation.controller.js","controllers/newevent.controller.js","controllers/verification.controller.js","directives/backImg.directive.js","directives/datepicker.directive.js","directives/discussion.directive.js","directives/dropdown.directive.js","directives/form.directive.js","directives/poll.directive.js","filters/elapsed.filter.js","services/communicator.service.js","services/modal.service.js","services/notification.service.js"],"names":["angular","module","config","$stateProvider","$urlRouterProvider","$locationProvider","html5Mode","otherwise","$injector","$state","get","go","state","url","templateUrl","controller","factory","$resource","id","update","method","verify","destroy","set","title","document","run","$templateCache","put","Title","$scope","showNotice","$http","$timeout","Event","ConfirmModal","Notification","params","event","_","forEach","dates","date","raw_date","Date","possible_times","time","start_time","end_time","master","copy","$watch","value","undoChanges","didChange","JSON","stringify","didChangeDates","submit","form","$valid","message","confirmText","isDestructive","confirm","participants","type","Communicator","data","isDeleted","trigger","eventUrl","href","_id","absolute","openEvent","isClosed","cancelText","closeEvent","editEvent","examplesNames","examples","name","push","numberDatesToGenerate","baseDate","moment","startOf","i","randomDate","add","Math","ceil","random","toISOString","j","startTime","endTime","creator","email","allowNotifications","location","description","emails","comments","author","content","isExample","$save","voted_by","sample","pluck","length","updatedEvent","newEvent","$rootScope","$location","$document","isActive","path","clickHandler","isClickedElementChildOfPopup","element","find","target","console","log","toggleMenu","$on","removeClass","unbind","isOpen","hasClass","addClass","bind","then","code","timeout","directive","scope","attrs","backImg","css","background-image","restrict","require","model","control","link","el","ngModel","newValue","$setViewValue","$validate","$validators","required","modelValue","today","activeDate","clone","setMonth","toDate","startDate","startDateDOW","day","format","days","Array","isOutsideMonth","month","isToday","isSame","selectDay","dayObj","index","splice","inserted","undefined","dateObject","returnIndex","modelDate","year","nextMonth","prevMonth","removeDate","parse","Comment","controllerAs","comment","e","participant","this","deleteComment","remove","cid","postComment","commentForm","scrollToBottom","$setPristine","thread","scrollTop","prop","open","toggle","service","emailRegexString","emailRegex","RegExp","prettyError","errors","field","pattern","maxlength","FormHelper","$watchCollection","init","deregister","unsetDate","dateToUnset","getTime","addTime","indexOf","removeTime","$viewChangeListeners","$modelValue","$parsers","$isEmpty","toString","$render","deleteEvent","setClass","Participant","defaults","participantVotes","didVote","toggleVote","contains","voter","hasVote","pid","edit","cancel","pollCtrl","save","formnew","currentParticipantIds","newParticipantIds","newParticipant","difference","$promise","example","votes","k","answer","isTopDate","highest","numberVotes","isTopDateExample","numberVotesExample","numVotes","filter","$filter","timeNow","seconds","floor","minutes","hours","$emit","apply","arguments","mixpanel","track","btfModal","modal","deactivate","activate","close"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('rallly', ['ui.router', 'ngResource', 'btford.modal', 'ngTagsInput', 'ngAnimate', 'ngSanitize'])\n    .config(function ($stateProvider, $urlRouterProvider, $locationProvider) {\n        $locationProvider.html5Mode(true);\n        $urlRouterProvider.otherwise(function ($injector, $location) {\n            var $state = $injector.get('$state');\n            $state.go('notfound');\n        });\n        $stateProvider\n            .state('newevent', {\n                url: '/new',\n                templateUrl: 'templates/newevent.html',\n                controller: 'NewEventCtrl',\n            })\n            .state('deletedevent', {\n                templateUrl: 'templates/deletedevent.html',\n            })\n            .state('newevent.success', {\n                templateUrl: 'templates/newEvent/success.html'\n            })\n            .state('about', {\n                url: '/about',\n                templateUrl: 'templates/about.html',\n                controller: 'AboutCtrl'\n            })\n            .state('example', {\n                url: '/example',\n                controller: 'ExampleCtrl'\n            })\n            .state('notfound', {\n                templateUrl: 'templates/notfound.html'\n            })\n            .state('event', {\n                url: '/:id',\n                templateUrl: 'templates/event.html',\n                controller: 'EventCtrl'\n            })\n            .state('editevent', {\n                url: '/:id/edit',\n                templateUrl: 'templates/editevent.html',\n                controller: 'EditEventCtrl'\n            })\n            .state('verifyevent', {\n                url: '/verify/:id/code/:code',\n                controller: 'VerificationCtrl'\n            })\n            .state('deleteevent', {\n                url: '/delete/:id/code/:code',\n                controller: 'DeletionCtrl'\n            });\n    })\n    .factory('Event', function ($resource) {\n        return $resource('/api/event/:id', {id: '@_id'}, {\n            'update': {method: 'PUT'},\n            'verify': {method: 'GET', url: '/api/event/:id/code/:code'},\n            'destroy': {method: 'DELETE', url: '/api/event/:id/code/:code'}\n        });\n    })\n    .factory('Participant', function ($resource) {\n        return $resource('/api/event/:id/participant/:pid', {id: '@_id'}, {\n            'update': {method: 'PUT'}\n        });\n    })\n    .factory('Comment', function ($resource) {\n        return $resource('/api/event/:id/comment/:cid', {id: '@_id'}, {\n            'update': {method: 'PUT'}\n        });\n    })\n    .factory('Title', function () {\n        return {\n            set: function (title) {\n                document.title = title;\n            }\n        };\n    });\n","angular.module(\"rallly\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"templates/about.html\",\"<div class=\\\"box\\\">\\n    <div class=\\\"box-title\\\">Frequently Asked Questions</div>\\n    <div class=\\\"box-description\\\">\\n        Want to find out more about Rallly? Check out the FAQs below.\\n    </div>    <h2>What is Rallly?</h2>\\n    <p>\\n        Rallly is a collaborative scheduling service that makes deciding on a date fast and easy. In other words, Rallly helps you and your friends decide on a date to host an event.\\n    </p>\\n    <h2>Why is it called Rallly?</h2>\\n    <p>\\n        The name is derived from the proper spelling of the word, &ldquo;rally&rdquo;. The Webster dictionary defines rally as, &ldquo;to muster for a common purpose&rdquo; which accurately describes the goal of this service. The inproper spelling can be attributed to the difficulty of finding short and meaningful domain names.\\n    </p>\\n    <h2>Who made this?</h2>\\n    <p>\\n        Rallly was created by <a href=\\\"http://lukevella.com\\\">Luke Vella</a>.\\n    </p>\\n</div>\\n\");\n$templateCache.put(\"templates/confirmmodal.html\",\"<div class=\\\"rl-modal-overlay\\\">\\n\\n<div class=\\\"rl-modal-position\\\">\\n\\n    <div class=\\\"rl-modal\\\">\\n        <div class=\\\"rl-modal-title\\\">{{modal.title}}</div>\\n        <div class=\\\"rl-modal-message\\\">\\n            {{modal.message}}\\n        </div>\\n        <div class=\\\"rl-modal-actions\\\">\\n            <button type=\\\"button\\\" ng-click=\\\"modal.confirm()\\\" ng-show=\\\"modal.confirm\\\" class=\\\"btn\\\" ng-class=\\\"{danger : modal.isDestructive}\\\">{{modal.confirmText}}</button>\\n            <button type=\\\"button\\\" ng-click=\\\"modal.cancel()\\\"  class=\\\"btn\\\">{{modal.cancelText}}</button>\\n        </div>\\n    </div>\\n\\n</div>\\n\\n</div>\\n\");\n$templateCache.put(\"templates/deletedevent.html\",\"<div class=\\\"box\\\">\\n    <div class=\\\"box-message\\\">\\n        <div class=\\\"main-image\\\">\\n            <img src=\\\"/images/bin.png\\\" width=\\\"100\\\" />\\n        </div>\\n        <div class=\\\"title\\\">Event Deleted</div>\\n        <div class=\\\"content\\\">\\n            This event has been deleted and is no longer accessible.\\n        </div>\\n    </div>\\n</div>\\n\");\n$templateCache.put(\"templates/editevent.html\",\"<div ng-show=\\\"event._id\\\">\\n    <div class=\\\"box\\\">\\n\\n        <div class=\\\"box-title\\\">Edit Event</div>\\n        <div class=\\\"box-description\\\">\\n            You can makes changes to your existing event by changing the fields in the form below.\\n        </div>\\n\\n        <form novalidate name=\\\"form\\\" ng-submit=\\\"submit()\\\">\\n\\n            <section class=\\\"box-section\\\" user-form form=\\\"form\\\" event=\\\"event\\\"></section>\\n            <section class=\\\"box-section\\\" event-form form=\\\"form\\\" event=\\\"event\\\"></section>\\n            <section class=\\\"box-section\\\" date-form form=\\\"form\\\" event=\\\"event\\\"></section>\\n            <section class=\\\"box-section\\\" time-form form=\\\"form\\\" event=\\\"event\\\" ng-show=\\\"event.dates.length\\\"></section>\\n            <section class=\\\"box-section\\\" settings-form form=\\\"form\\\" event=\\\"event\\\"></section>\\n\\n            <div class=\\\"box-controls box-bottom-sticky\\\">\\n                <button type=\\\"submit\\\" ng-show=\\\"didChange()\\\" class=\\\"btn btn-primary\\\" ng-class=\\\"{disabled : !didChange()}\\\">\\n                    Save Changes\\n                </button>\\n                <button type=\\\"button\\\" ng-click=\\\"undoChanges()\\\" class=\\\"btn\\\" ng-show=\\\"didChange()\\\">Undo Changes</button>\\n                <a href=\\\"/{{event._id}}\\\" class=\\\"btn\\\" ng-hide=\\\"didChange()\\\">Done</a>\\n            </div>\\n\\n        </form>\\n\\n    </div>\\n\\n</div>\\n\");\n$templateCache.put(\"templates/event.html\",\"<div ng-show=\\\"event._id\\\">\\n    <div class=\\\"box \\\">\\n        <div class=\\\"event-header\\\">\\n            <div class=\\\"details\\\">\\n                <div class=\\\"title\\\">\\n                    {{event.title}}\\n                    <span class=\\\"title-label danger\\\" ng-show=\\\"event.isClosed\\\">Poll Closed</span>\\n                    <span class=\\\"title-label success\\\" ng-hide=\\\"event.isClosed\\\">Poll Open</span>\\n                </div>\\n                <div class=\\\"subtitle\\\">\\n                    Created by <a href=\\\"mailto:{{event.creator.email}}\\\">{{event.creator.name}}</a>\\n                    &bull; {{event.created | elapsed}}\\n                    &bull; <a href=\\\"#\\\" ng-click=\\\"editEvent()\\\">Edit Details</a>\\n                </div>\\n            </div>\\n            <div class=\\\"actions\\\">\\n                <button class=\\\"btn\\\" ng-click=\\\"editEvent()\\\">Edit Event</button>\\n            </div>\\n        </div>\\n        <div class=\\\"event-description\\\" ng-if=\\\"event.description\\\" ng-bind-html=\\\"event.description | linky\\\"></div>\\n        <div class=\\\"event-location\\\" ng-if=\\\"event.location\\\">\\n            Location:\\n            <a href=\\\"http://maps.google.com?q={{event.location}}\\\" target=\\\"_blank\\\">{{event.location}}</a>\\n        </div>\\n\\n        <div class=\\\"poll-wrapper\\\">\\n            <div poll event=\\\"event\\\" class=\\\"poll\\\"></div>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"box\\\" ng-hide=\\\"event.comments.length == 0 && event.isClosed\\\">\\n        <div class=\\\"box-title\\\">\\n            Discussion\\n        </div>\\n        <div class=\\\"box-description\\\">\\n            You can discuss the event with your friends by leaving a comment below.\\n        </div>\\n        <div discussion event=\\\"event\\\">\\n\\n        </div>\\n    </div>\\n</div>\\n\");\n$templateCache.put(\"templates/home.html\",\"<div class=\\\"page-placeholder\\\">\\n    <div class=\\\"image\\\">\\n        <img src=\\\"/images/mark_large.png\\\" width=\\\"67\\\" />\\n    </div>\\n    <div class=\\\"title\\\">\\n        Schedule an Event\\n    </div>\\n    <div class=\\\"content\\\">\\n        Want to host an event but can’t decide on a date? Click on the button below to start!\\n    </div>\\n    <button ng-click=\\\"newEvent()\\\" class=\\\"btn\\\">Schedule New Event</button>\\n</div>\\n\");\n$templateCache.put(\"templates/newevent.html\",\"<div class=\\\"box\\\">\\n    <div class=\\\"box-title\\\">Schedule a New Event</div>\\n    <div class=\\\"box-description\\\">\\n        Fill in the form below to create your event and share it with your friends and colleagues.\\n    </div>\\n    <form novalidate autocomplete=\\\"off\\\" name=\\\"form\\\" ng-hide=\\\"eventUrl\\\" ng-submit=\\\"submit()\\\">\\n        <section class=\\\"box-section\\\" user-form form=\\\"form\\\" event=\\\"event\\\"></section>\\n\\n        <section class=\\\"box-section\\\" event-form form=\\\"form\\\" event=\\\"event\\\"></section>\\n\\n        <section class=\\\"box-section\\\" date-form form=\\\"form\\\" event=\\\"event\\\"></section>\\n\\n        <section class=\\\"box-section\\\" time-form form=\\\"form\\\" event=\\\"event\\\" ng-show=\\\"event.dates.length\\\"></section>\\n\\n        <section class=\\\"box-section\\\" participants-form form=\\\"form\\\" event=\\\"event\\\"></section>\\n\\n        <section class=\\\"box-section\\\" settings-form form=\\\"form\\\" event=\\\"event\\\"></section>\\n\\n        <div class=\\\"box-controls box-bottom-sticky\\\">\\n            <button type=\\\"submit\\\" class=\\\"btn\\\">Create Event</button>\\n        </div>\\n\\n    </form>\\n    <div class=\\\"box-message animated zoomIn\\\" ng-show=\\\"eventUrl\\\">\\n        <div class=\\\"main-image\\\">\\n            <img src=\\\"/images/success_large.png\\\" width=\\\"100\\\" />\\n        </div>\\n        <div class=\\\"title\\\">Event Created</div>\\n        <div class=\\\"content\\\">\\n            Your event has been created successfully! An email has been sent to each participant with a link to the event page. \\n        </div>\\n        <div class=\\\"mini-divider\\\">\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" disabled=\\\"true\\\" value=\\\"{{eventUrl}}\\\" />\\n            <a href=\\\"{{eventUrl}}\\\" class=\\\"btn form-btn\\\">GO</a>\\n        </div>\\n    </div>\\n</div>\\n\");\n$templateCache.put(\"templates/notfound.html\",\"<div class=\\\"not-found\\\">\\n    <video id=\\\"gfyVid1\\\" class=\\\"gfyVid\\\" width=\\\"480\\\" height=\\\"360\\\" autoplay=\\\"\\\" loop=\\\"\\\" muted=\\\"muted\\\" style=\\\"display: block;\\\" poster=\\\"//thumbs.gfycat.com/PaltryComfortableBaldeagle-poster.jpg\\\">\\n            <source id=\\\"webmsource\\\" src=\\\"//zippy.gfycat.com/PaltryComfortableBaldeagle.webm\\\" type=\\\"video/webm\\\">\\n            <source id=\\\"mp4source\\\" src=\\\"//zippy.gfycat.com/PaltryComfortableBaldeagle.mp4\\\" type=\\\"video/mp4\\\">\\n            Sorry, you don\\'t have HTML5 video and we didn\\'t catch this properly in javascript.\\n            You can try to view the gif directly: <a href=\\\"http://zippy.gfycat.com/PaltryComfortableBaldeagle.gif\\\">http://zippy.gfycat.com/PaltryComfortableBaldeagle.gif</a>.\\n        </video>\\n    <div class=\\\"overlay\\\">\\n        <div class=\\\"wrapper\\\">\\n            <div class=\\\"title\\\">Error 404 </div>\\n            <div class=\\\"description\\\">The page you are looking for could not be found!</h2>\\n            <div class=\\\"actions\\\">\\n                <a href=\\\"/\\\" target=\\\"_self\\\">Go to Homepage</a>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\");\n$templateCache.put(\"templates/notification.html\",\"<div class=\\\"notification {{notification.type}}\\\" ng-click=\\\"notification.close()\\\">\\n    <div class=\\\"title\\\">\\n        {{notification.title}}\\n    </div>\\n    <div class=\\\"message\\\">\\n        {{notification.message}}\\n    </div>\\n</div>\\n\");\n$templateCache.put(\"templates/directives/datePicker.html\",\"<div class=\\\"date-picker\\\">\\n    <div class=\\\"wrapper\\\">\\n        <div class=\\\"date-picker-head\\\">\\n            <a href=\\\"#\\\" class=\\\"arrow\\\" ng-click=\\\"prevMonth()\\\">&#10094;</a>\\n            <span class=\\\"title\\\">\\n                <span class=\\\"title-text\\\">{{title}}</span>\\n            </span>\\n            <a href=\\\"#\\\" class=\\\"arrow\\\" ng-click=\\\"nextMonth()\\\">&#10095;</a>\\n        </div>\\n        <div class=\\\"dow\\\">\\n            <div class=\\\"day\\\">\\n                Su\\n            </div>\\n            <div class=\\\"day\\\">\\n                Mo\\n            </div>\\n            <div class=\\\"day\\\">\\n                Tu\\n            </div>\\n            <div class=\\\"day\\\">\\n                We\\n            </div>\\n            <div class=\\\"day\\\">\\n                Th\\n            </div>\\n            <div class=\\\"day\\\">\\n                Fr\\n            </div>\\n            <div class=\\\"day\\\">\\n                Sa\\n            </div>\\n        </div>\\n        <div class=\\\"values\\\">\\n            <div ng-repeat=\\\"day in days\\\" class=\\\"value\\\"  ng-class=\\\"{ outside : day.isOutsideMonth, today : day.isToday, active : isActive(day.date) }\\\" ng-click=\\\"selectDay(day)\\\">\\n                {{day.date | date : \\'d\\' }}\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\");\n$templateCache.put(\"templates/directives/discussion.html\",\"<ul class=\\\"comment-thread\\\" ng-show=\\\"event.comments.length\\\">\\n    <li ng-repeat=\\\"comment in event.comments\\\" class=\\\"comment\\\">\\n        <div class=\\\"avatar-section\\\">\\n            <img src=\\\"/images/avatar.png\\\" />\\n        </div>\\n        <div class=\\\"comment-section\\\">\\n            <a href=\\\"#\\\" class=\\\"comment-delete\\\" ng-click=\\\"discussionCtrl.deleteComment(comment)\\\">&times;</a>\\n            <div class=\\\"meta\\\">\\n                <span class=\\\"name\\\">{{comment.author.name}}</span>\\n                <span class=\\\"time\\\">{{comment.created | elapsed}}</span>\\n            </div>\\n            <div class=\\\"content\\\" ng-bind-html=\\\"comment.content | linky\\\"></div>\\n        </div>\\n    </li>\\n</ul>\\n<form novalidate ng-submit=\\\"discussionCtrl.postComment()\\\" name=\\\"commentForm\\\" class=\\\"comment-form\\\">\\n    <div class=\\\"avatar-section\\\">\\n        <img src=\\\"/images/avatar.png\\\" />\\n    </div>\\n    <div class=\\\"input-section form-group\\\">\\n        <div class=\\\"content-section\\\">\\n            <textarea class=\\\"form-control\\\" required ng-model=\\\"comment.content\\\" placeholder=\\\"Write a comment...\\\"></textarea>\\n        </div>\\n        <div class=\\\"name-section\\\">\\n            <div class=\\\"name-container\\\">\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" required placeholder=\\\"Your Name\\\" ng-model=\\\"comment.author.name\\\" />\\n                <button type=\\\"submit\\\" class=\\\"btn\\\">Post Comment</button>\\n                <span class=\\\"form-error\\\" ng-show=\\\"commentForm.$submitted && commentForm.$error\\\">\\n                    <img src=\\\"/images/error.png\\\" width=\\\"14\\\" /> Make sure you fill in all the fields.\\n                </span>\\n            </div>\\n        </div>\\n    </div>\\n</form>\\n\");\n$templateCache.put(\"templates/directives/poll.html\",\"<div class=\\\"poll-header\\\">\\n    <div class=\\\"header participants-header\\\">\\n        {{event.participants.length}} participants\\n        <div class=\\\"time-label\\\">\\n            <div>Start:</div>\\n            <div>End:</div>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"header date-header\\\">\\n        <div class=\\\"date-cell\\\" ng-repeat=\\\"d in event.dates\\\">\\n            <div class=\\\"date-container\\\">\\n                <div class=\\\"daticon-container\\\">\\n                    <div class=\\\"dow\\\">\\n                        {{d.raw_date | date: \\'EEE\\'}}\\n                    </div>\\n                    <div class=\\\"date\\\">\\n                        {{d.raw_date | date: \\'MMM d\\'}}\\n                    </div>\\n                </div>\\n                <div class=\\\"times-row\\\">\\n                    <div class=\\\"time-cell\\\" ng-repeat=\\\"time in d.possible_times\\\">\\n                        {{time.start_time | date: \\'hh:mma\\'}}\\n                        {{time.end_time | date: \\'hh:mma\\'}}\\n                        <span class=\\\"count\\\" ng-show=\\\"event.participants.length && numberVotes(time)\\\"\\n                              ng-class={top:isTopDate(time)}>{{numberVotes(time)}}</span>\\n                        <span class=\\\"count\\\" ng-show=\\\"!event.participants.length && numberVotesExample($index+$parent.$index)\\\"\\n                              ng-class={top:isTopDateExample($index+$parent.$index)}>{{numberVotesExample($index+$parent.$index)}}</span>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"header actions-header\\\">\\n    </div>\\n</div>\\n<div class=\\\"poll-body\\\">\\n    <div class=\\\"poll-entry\\\" ng-repeat=\\\"participant in event.participants\\\">\\n        <form novalidate>\\n            <div class=\\\"cell name-cell\\\">\\n                <span class=\\\"avatar style-{{($index % 10) + 1 }}\\\">\\n                    <img src=\\\"/images/user.png\\\" width=\\\"11\\\"/>\\n                </span>\\n                <input required autocomplete=\\\"off\\\" type=\\\"text\\\" class=\\\"form-control\\\" ng-model=\\\"participant.name\\\"\\n                       ng-show=\\\"editMode\\\" value=\\\"participant.name\\\"/>\\n                <span ng-hide=\\\"editMode\\\" class=\\\"name editable\\\"\\n                      ng-click=\\\"editMode = true && !event.isClosed; pollCtrl.edit(participant)\\\">{{participant.name}}</span>\\n            </div>\\n            <div class=\\\"time-group\\\" ng-repeat=\\\"date in event.dates track by date._id\\\">\\n                <div class=\\\"cell vote-cell\\\" ng-repeat=\\\"time in date.possible_times\\\">\\n                    <img src=\\\"/images/tick@2x.png\\\" width=\\\"16\\\" ng-hide=\\\"editMode\\\"\\n                         ng-if=\\\"pollCtrl.hasVote(time, participant)\\\"/>\\n                    <img src=\\\"/images/nope@2x.png\\\" width=\\\"8\\\" ng-hide=\\\"editMode\\\"\\n                         ng-if=\\\"!pollCtrl.hasVote(time, participant)\\\"/>\\n                    <input ng-checked=\\\"pollCtrl.hasVote(time, participant)\\\" ng-show=\\\"editMode\\\" type=\\\"checkbox\\\"/>\\n\\n                    <div class=\\\"overlay\\\" ng-show=\\\"editMode\\\" ng-click=\\\"pollCtrl.toggleVote(time, participant)\\\"></div>\\n                </div>\\n            </div>\\n            <div class=\\\"cell action-cell\\\" ng-hide=\\\"event.isClosed\\\">\\n                <button type=\\\"button\\\" ng-hide=\\\"editMode\\\" ng-click=\\\"editMode = true; pollCtrl.edit(participant)\\\"\\n                        class=\\\"btn hover\\\">Edit\\n                </button>\\n                <button type=\\\"button\\\" ng-hide=\\\"editMode\\\" ng-click=\\\"pollCtrl.delete(participant)\\\"\\n                        class=\\\"btn danger hover\\\">Delete\\n                </button>\\n                <button type=\\\"submit\\\" ng-show=\\\"editMode\\\" ng-click=\\\"editMode = false; pollCtrl.update()\\\" class=\\\"btn\\\">\\n                    Save\\n                </button>\\n                <button type=\\\"button\\\" ng-show=\\\"editMode\\\" ng-click=\\\"editMode = false; pollCtrl.cancel(participant)\\\"\\n                        class=\\\"btn\\\">Cancel\\n                </button>\\n            </div>\\n        </form>\\n    </div>\\n    <div class=\\\"poll-example\\\" ng-class=\\\"{hidden : event.participants.length > 0}\\\">\\n        <div class=\\\"poll-entry\\\" ng-repeat=\\\"example in examples\\\">\\n            <div class=\\\"cell name-cell\\\">\\n                <span class=\\\"avatar style-{{$index + 1}}\\\">\\n                    <img src=\\\"/images/user.png\\\" width=\\\"11\\\"/>\\n                </span>\\n                <span class=\\\"name\\\">{{example.name}}</span>\\n            </div>\\n            <div class=\\\"time-group\\\" ng-repeat=\\\"date in event.dates\\\">\\n                <div class=\\\"cell vote-cell\\\" ng-repeat=\\\"time in date.possible_times\\\">\\n                    <img src=\\\"/images/tick@2x.png\\\" width=\\\"16\\\" ng-if=\\\"example.votes[$index + $parent.$index]\\\"/>\\n                    <img src=\\\"/images/nope@2x.png\\\" width=\\\"8\\\" ng-if=\\\"!example.votes[$index + $parent.$index]\\\"/>\\n                </div>\\n            </div>\\n        </div>\\n        <div class=\\\"overlay\\\">\\n            <div class=\\\"overlay-text\\\">\\n                Fill in the form below to get started\\n            </div>\\n        </div>\\n    </div>\\n    <div ng-hide=\\\"event.isClosed\\\" class=\\\"poll-entry highlight\\\">\\n        <form novalidate name=\\\"formnew\\\" ng-submit=\\\"pollCtrl.save()\\\">\\n            <div class=\\\"cell name-cell\\\">\\n                <span class=\\\"avatar style-{{participant.style}}\\\">\\n                    <img src=\\\"/images/user.png\\\" width=\\\"11\\\"/>\\n                </span>\\n                <input autocomplete=\\\"off\\\" name=\\\"username\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Your name...\\\"\\n                       ng-model=\\\"participant.name\\\" required value=\\\"participant.name\\\"/>\\n            </div>\\n            <div class=\\\"time-group\\\" ng-repeat=\\\"date in event.dates track by date._id\\\">\\n                <div class=\\\"cell vote-cell\\\" ng-repeat=\\\"time in date.possible_times\\\">\\n                    <input ng-model=\\\"participantVotes[date._id][time._id]\\\" ng-false-value=\\\"false\\\" type=\\\"checkbox\\\"/>\\n\\n                    <div class=\\\"overlay\\\"\\n                         ng-click=\\\"participantVotes[date._id][time._id] = !participantVotes[date._id][time._id]\\\"></div>\\n                </div>\\n            </div>\\n            <div class=\\\"cell action-cell\\\">\\n                <button type=\\\"submit\\\" ng-class=\\\"{ \\'animated shake\\' : formnew.$submitted && formnew.$invalid  }\\\"\\n                        class=\\\"btn\\\">Save\\n                </button>\\n            </div>\\n        </form>\\n    </div>\\n</div>\\n\");\n$templateCache.put(\"templates/directives/timePicker.html\",\"<div class=\\\"time-picker\\\">\\n    <div class=\\\"time-picker-col\\\">\\n        <div class=\\\"daticon\\\">\\n            <div class=\\\"dow\\\">\\n                {{date | date: \\'EEE\\'}}\\n            </div>\\n            <div class=\\\"day\\\">\\n                {{date | date: \\'d\\'}}\\n            </div>\\n            <div class=\\\"month\\\">\\n                {{date | date : \\'MMM\\'}}\\n            </div>\\n            <!-- <span class=\\\"delete\\\" ng-click=\\\"datepicker.unsetDate(date)\\\"></span> -->\\n        </div>\\n    </div>\\n    <div class=\\\"time-picker-col\\\" ng-repeat=\\\"time in date.times track by $index\\\">\\n        <input type=\\\"text\\\" class=\\\"time-picker-input\\\" time-picker ng-model=\\\"time\\\" ng-model-options=\\\"{ updateOn: \\'blur\\' }\\\" />\\n    </div>\\n</div>\\n\");\n$templateCache.put(\"templates/form/dateForm.html\",\"<div class=\\\"section-details\\\">\\n    <div class=\\\"section-title\\\">Choose Dates</div>\\n    <ul class=\\\"daticon-list\\\">\\n        <li ng-repeat=\\\"d in event.dates\\\">\\n            <div class=\\\"daticon\\\">\\n                <div class=\\\"dow\\\">\\n                    {{d.raw_date | date: \\'EEE\\'}}\\n                </div>\\n                <div class=\\\"day\\\">\\n                    {{d.raw_date | date: \\'d\\'}}\\n                </div>\\n                <div class=\\\"month\\\">\\n                    {{d.raw_date | date : \\'MMM\\'}}\\n                </div>\\n                <span class=\\\"delete\\\" ng-click=\\\"datepicker.removeDate(d)\\\"></span>\\n            </div>\\n        </li>\\n    </ul>\\n</div>\\n<div class=\\\"section-main\\\">\\n    <div class=\\\"form-row\\\">\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"email\\\">Calendar</label>\\n            <span class=\\\"form-error\\\" ng-show=\\\"form.$submitted && form.datepicker.$error.required\\\">\\n                <img src=\\\"/images/error.png\\\" width=\\\"14\\\" /> You need to select a few dates\\n            </span>\\n            <div datepicker required name=\\\"datepicker\\\" control=\\\"datepicker\\\" ng-model=\\\"event.dates\\\"></div>\\n        </div>\\n    </div>\\n</div>\\n\");\n$templateCache.put(\"templates/form/eventForm.html\",\"<div class=\\\"section-details\\\">\\n    <div class=\\\"section-title\\\">Event Details</div>\\n</div>\\n<div class=\\\"section-main\\\">\\n    <div class=\\\"form-row\\\">\\n        <div class=\\\"form-col\\\">\\n            <div class=\\\"form-group\\\">\\n                <label for=\\\"title\\\">Title</label>\\n                <span class=\\\"form-error\\\" ng-show=\\\"(form.title.$touched || form.$submitted) && errors.title\\\">\\n                    <img src=\\\"/images/error.png\\\" width=\\\"14\\\" /> {{errors.title}}\\n                </span>\\n                <input id=\\\"title\\\" name=\\\"title\\\" ng-maxlength=\\\"30\\\" required ng-model=\\\"event.title\\\" type=\\\"text\\\" placeholder=\\\"Monthly Meetup...\\\" class=\\\"form-control extend\\\"/>\\n            </div>\\n        </div>\\n        <div class=\\\"form-col\\\">\\n            <div class=\\\"form-group optional\\\">\\n                <label for=\\\"location\\\">Location</label>\\n                <span class=\\\"form-error\\\" ng-show=\\\"(form.location.$touched || form.$submitted) && errors.location\\\">\\n                    <img src=\\\"/images/error.png\\\" width=\\\"14\\\" /> {{errors.location}}\\n                </span>\\n                <input id=\\\"location\\\" name=\\\"location\\\" ng-model=\\\"event.location\\\" ng-maxlength=\\\"50\\\" type=\\\"text\\\" placeholder=\\\"Rick\\'s Cafe...\\\" class=\\\"form-control extend\\\"/>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"form-row\\\">\\n        <div class=\\\"form-group optional\\\">\\n            <label for=\\\"description\\\" >Description</label>\\n            <textarea id=\\\"description\\\" name=\\\"description\\\" ng-model=\\\"event.description\\\" placeholder=\\\"Enter Description...\\\" class=\\\"form-control extend\\\"></textarea>\\n        </div>\\n    </div>\\n</div>\\n\");\n$templateCache.put(\"templates/form/participantsForm.html\",\"<div class=\\\"section-details\\\">\\n    <div class=\\\"section-title\\\">Invite Participants</div>\\n</div>\\n<div class=\\\"section-main\\\">\\n    <div class=\\\"form-row\\\">\\n        <div class=\\\"form-group optional\\\">\\n            <label>Participant\\'s Emails</label>\\n            <tags-input max-length=\\\"50\\\" allowed-tags-pattern=\\\"{{emailRegex}}\\\" display-property=\\\"email\\\" ng-model=\\\"event.emails\\\" placeholder=\\\"Add an Email\\\" type=\\\"email\\\" autocomplete=\\\"off\\\"></tags-input>\\n            <input type=\\\"hidden\\\" name=\\\"shouldCreate\\\" value=\\\"true\\\" />\\n\\n        </div>\\n    </div>\\n</div>\\n\");\n$templateCache.put(\"templates/form/settingsForm.html\",\"<div class=\\\"section-details\\\">\\n    <div class=\\\"section-title\\\">Settings</div>\\n</div>\\n<div class=\\\"section-main\\\">\\n    <div class=\\\"switch-row\\\" ng-if=\\\"event._id\\\">\\n        <div class=\\\"switch-details\\\">\\n            <div class=\\\"title\\\">\\n                Poll Status\\n            </div>\\n            <div class=\\\"description\\\">\\n                Let people vote on the poll.\\n            </div>\\n        </div>\\n        <div class=\\\"switch\\\">\\n            <div class=\\\"switch-value\\\">\\n                {{event.isClosed ? \\'Closed\\' : \\'Open\\' }}\\n            </div>\\n            <div switch-toggle ng-model=\\\"event.isClosed\\\" invert>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"switch-row\\\">\\n        <div class=\\\"switch-details\\\">\\n            <div class=\\\"title\\\">\\n                Notifications\\n            </div>\\n            <div class=\\\"description\\\">\\n                Send me an email when someone votes or comments on the event.\\n            </div>\\n        </div>\\n        <div class=\\\"switch\\\">\\n            <div class=\\\"switch-value\\\">\\n                {{event.creator.allowNotifications ? \\'Enabled\\' : \\'Disabled\\' }}\\n            </div>\\n            <div switch-toggle ng-model=\\\"event.creator.allowNotifications\\\">\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"switch-row\\\" ng-if=\\\"event._id\\\">\\n        <div class=\\\"switch-details\\\">\\n            <div class=\\\"title\\\">\\n                Delete Event\\n            </div>\\n            <div class=\\\"description\\\">\\n                Once you delete an event it will no longer be accessible.\\n            </div>\\n        </div>\\n        <div class=\\\"switch\\\">\\n            <button type=\\\"button\\\" ng-click=\\\"deleteEvent()\\\" class=\\\"btn\\\" ng-class=\\\"{danger : !deleteRequestSent, disabled : deleteRequestSent}\\\">{{deleteRequestSent ? \\'Request Sent\\' : \\'Delete Event\\' }}</button>\\n        </div>\\n    </div>\\n</div>\\n</section>\\n\");\n$templateCache.put(\"templates/form/timeForm.html\",\"<div class=\\\"section-details\\\">\\n    <div class=\\\"section-title\\\">Choose Times</div>\\n</div>\\n<div class=\\\"section-main\\\">\\n    <table class=\\\"time-form\\\">\\n        <thead>\\n        <tr>\\n            <th>\\n                Date\\n            </th>\\n            <th>\\n                Start Time\\n            </th>\\n            <th>\\n                End Time\\n            </th>\\n            <th>\\n            </th>\\n        </tr>\\n        </thead>\\n        <tbody>\\n        <tr ng-repeat-start=\\\"d in event.dates\\\">\\n            <td class=\\\"date-label-cell\\\" rowspan=\\\"2\\\">\\n                <div class=\\\"daticon block\\\">\\n                    <div class=\\\"dow\\\">\\n                        {{d.raw_date | date: \\'EEE\\'}}\\n                    </div>\\n                    <div class=\\\"day\\\">\\n                        {{d.raw_date | date: \\'d\\'}}\\n                    </div>\\n                    <div class=\\\"month\\\">\\n                        {{d.raw_date | date: \\'MMM\\'}}\\n                    </div>\\n                    <span class=\\\"delete\\\" ng-click=\\\"unsetDate(d)\\\"></span>\\n                </div>\\n            </td>\\n            <td class=\\\"start-column\\\">\\n                <input ng-repeat=\\\"time in d.possible_times\\\" type=\\\"time\\\" ng-model-options=\\\"{updateOn: \\'blur\\'}\\\"\\n                       ng-model=\\\"d.possible_times[$index].start_time\\\" class=\\\"time-picker-input\\\"/>\\n            </td>\\n            <td class=\\\"end-column\\\">\\n                <input ng-repeat=\\\"time in d.possible_times\\\" type=\\\"time\\\" ng-model-options=\\\"{updateOn: \\'blur\\'}\\\"\\n                       ng-model=\\\"d.possible_times[$index].end_time\\\" class=\\\"time-picker-input\\\"/>\\n            </td>\\n            <td style=\\\"min-width: 111px; vertical-align: bottom;\\\">\\n                <button class=\\\"center remove-time\\\" ng-repeat=\\\"time in d.possible_times\\\"\\n                        ng-click=\\\"removeTime(time, d, $index); $event.preventDefault();\\\" ng-if=\\\"$index !== 0\\\">\\n                    Remove\\n                </button>\\n            </td>\\n        </tr>\\n        <tr ng-repeat-end>\\n            <td colspan=\\\"2\\\">\\n                <button class=\\\"center add-time\\\" ng-click=\\\"addTime(d); $event.preventDefault();\\\">Add</button>\\n            </td>\\n            <td></td>\\n        </tr>\\n        </tbody>\\n    </table>\\n</div>\\n\");\n$templateCache.put(\"templates/form/userForm.html\",\"<div class=\\\"section-details\\\">\\n    <div class=\\\"section-title\\\">Your Details</div>\\n</div>\\n<div class=\\\"section-main\\\">\\n    <div class=\\\"form-row\\\">\\n        <div class=\\\"form-col\\\">\\n            <div class=\\\"form-group\\\">\\n                <label for=\\\"name\\\">Name</label>\\n                <span class=\\\"form-error\\\" ng-show=\\\"(form.name.$touched || form.$submitted) && errors.name\\\">\\n                    <img src=\\\"/images/error.png\\\" width=\\\"14\\\" /> {{errors.name}}\\n                </span>\\n                <input id=\\\"name\\\" name=\\\"name\\\" ng-maxlength=\\\"30\\\" required ng-model=\\\"event.creator.name\\\" type=\\\"text\\\" placeholder=\\\"John Doe...\\\" class=\\\"form-control extend\\\"/>\\n            </div>\\n        </div>\\n        <div class=\\\"form-col\\\">\\n            <div class=\\\"form-group\\\">\\n                <label for=\\\"email\\\">Email</label>\\n                <span class=\\\"form-error\\\" ng-show=\\\"(form.email.$touched || form.$submitted) && errors.email\\\">\\n                    <img src=\\\"/images/error.png\\\" width=\\\"14\\\" /> {{errors.email}}\\n                </span>\\n                <input type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\" ng-pattern=\\\"emailRegex\\\" required ng-model=\\\"event.creator.email\\\" placeholder=\\\"john.doe@email.com...\\\" class=\\\"form-control extend\\\"/>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\");}]);","angular.module('rallly')\n    .controller('AboutCtrl', function (Title) {\n        Title.set('About Rallly');\n    });\n","angular.module('rallly')\n    .controller('AccountCtrl', function ($scope, ConfirmModal) {\n        $scope.showNotice = function () {\n\n        }\n    });\n","angular.module('rallly')\n    .controller('EditEventCtrl', function ($scope, $http, $state, $timeout, Event, ConfirmModal, Notification, Title) {\n        var id = $state.params.id;\n         Event.get({id: id}, function (event) {\n            _.forEach(event.dates, function(date) {\n                date.raw_date = new Date(date.raw_date);\n                _.forEach(date.possible_times, function(time) {\n                    time.start_time = new Date(time.start_time);\n                    time.end_time = new Date(time.end_time);\n                });\n            });\n             $scope.event = event;\n            Title.set(\"Edit: \" + $scope.event.title);\n            $scope.master = angular.copy($scope.event);\n        }, function (e) {\n            $state.go('notfound');\n        });\n        $scope.$watch('event.isDeleted', function (value) {\n            if (value) {\n                $state.go('deletedevent');\n            }\n        });\n        $scope.undoChanges = function () {\n            $scope.event = angular.copy($scope.master);\n        };\n        $scope.didChange = function () {\n            return JSON.stringify($scope.master) != JSON.stringify($scope.event);\n        };\n        $scope.didChangeDates = function () {\n            return JSON.stringify($scope.master.dates) != JSON.stringify($scope.event.dates);\n        };\n        $scope.submit = function () {\n            if ($scope.form.$valid) {\n                if ($scope.didChangeDates()) {\n                    var modal = new ConfirmModal({\n                        title: 'Hold up!',\n                        message: 'Changing the dates will reset all entries by the participants. Are you sure you want to do that?',\n                        confirmText: 'Yes, I\\'m sure',\n                        isDestructive: true,\n                        confirm: function () {\n                            $scope.event.participants = [];\n                            update();\n                        }\n                    });\n\n                } else {\n                    update();\n                }\n            } else {\n                var notification = new Notification({\n                    title: 'Not so fast',\n                    message: 'Make sure you fill in all the required fields and try again.',\n                    type: 'error'\n                });\n            }\n        };\n        var update = function () {\n            Event.update({\n                    id: id\n                }, $scope.event,\n                function () {\n                    var notification = new Notification({\n                        title: 'Changes Saved',\n                        message: 'Your changes have been saved successfully.',\n                        type: 'success'\n                    });\n                    $scope.master = angular.copy($scope.event);\n                });\n        };\n    });\n","angular.module('rallly')\n    .controller('EventCtrl', function ($scope, $http, $state, Title, Event, ConfirmModal, Communicator) {\n\n        var id = $state.params.id;\n        // Get Event\n        $scope.event = Event.get({id: id}, function (data) {\n            // Set the page title to the event title\n            if (data.isDeleted) {\n                $state.go('deletedevent');\n                return;\n            }\n\n            Communicator.trigger('view:event', data);\n\n            Title.set($scope.event.title);\n            // Generate event url - i.e. http://rallly.co/jF9F_Fd\n            $scope.eventUrl = $state.href('event', {\n                id: $scope.event._id\n            }, {\n                absolute: true\n            });\n        }, function (e) {\n            $state.go('notfound');\n        });\n\n        $scope.openEvent = function () {\n            $scope.event.isClosed = false;\n            Event.update({\n                    id: id\n                }, $scope.event,\n                function () {\n                    var modal = new ConfirmModal({\n                        title: 'Event Open',\n                        message: 'People can vote and comment on this event.',\n                        cancelText: 'OK',\n                    });\n                });\n        };\n\n        $scope.closeEvent = function () {\n            $scope.event.isClosed = true;\n            Event.update({\n                    id: id\n                }, $scope.event,\n                function () {\n                    var modal = new ConfirmModal({\n                        title: 'Event Closed',\n                        message: 'People can no longer vote or comment on this event.',\n                        cancelText: 'OK',\n                    });\n                });\n        };\n\n        $scope.editEvent = function () {\n            $state.go('editevent', {id: $scope.event._id});\n        }\n\n    });\n","angular.module('rallly')\n    .controller('ExampleCtrl', function ($state, Event) {\n\n        // Generate Participants\n        var examplesNames = ['John Example', 'Jane Specimen', 'Mark Instance', 'Mary Case'];\n        var examples = [];\n        _.forEach(examplesNames, function (name) {\n            examples.push({\n                name: name\n            });\n        });\n\n        // Generate dates\n        var dates = [];\n        var numberDatesToGenerate = 4;\n        var baseDate = moment().startOf('minute');\n\n        for (var i = 0; i < numberDatesToGenerate; ++i) {\n            var randomDate = {\n                raw_date: baseDate.add(Math.ceil(Math.random() * 5), 'days').toISOString(),\n                possible_times: []\n            };\n            for (var j = 0; j < Math.ceil(Math.random() * 3); ++j) {\n                var startTime = baseDate.add(Math.ceil(Math.random() * 5000), 'minutes').toISOString();\n                var endTime = moment(startTime).add(Math.ceil(Math.random() * 5000), 'minutes').toISOString();\n                randomDate.possible_times.push({\n                    start_time: startTime,\n                    end_time: endTime\n                });\n            }\n            dates.push(randomDate);\n        }\n\n        var event = new Event({\n            \"creator\": {\n                \"name\": \"John Example\",\n                \"email\": \"rallly@lukevella.com\",\n                \"allowNotifications\": false\n            },\n            \"title\": \"Lunch Meeting\",\n            \"location\": \"Starbucks, 901 New York Avenue\",\n            \"description\": \"This event has been automatically generated just for you! Feel free to try out all the different features and when you're ready, you can schedule a new event.\",\n            \"dates\": dates,\n            \"participants\": examples,\n            \"emails\": [],\n            \"comments\": [{\n                author: {\n                    name: \"John Example\"\n                },\n                content: \"Hey guys, this is a comment!\"\n            }, {\n                author: {\n                    name: \"Mark Instance\"\n                },\n                content: \"Hi John... nice comment. Keep up the great work!\"\n            }, {\n                author: {\n                    name: \"John Example\"\n                },\n                content: \"Thank you!\"\n            }],\n            \"isExample\": true\n        });\n        event.$save(function (data) {\n            // Generate votes\n            _.forEach(data.dates, function (date) {\n                _.forEach(date.possible_times, function (time) {\n                    time.voted_by = _.sample(_.pluck(data.participants, '_id'), _.random(data.participants.length));\n                });\n            });\n\n            Event\n                .update({id: data._id}, data, function (updatedEvent) {\n                    $state.go('event', {id: updatedEvent._id}, {\n                        location: \"replace\"\n                    });\n                });\n        })\n    });\n","angular.module('rallly')\n    .controller('HomeCtrl', function ($scope, $state, Title) {\n        Title.set('Rallly - Collaborative Scheduling');\n\n        $scope.newEvent = function () {\n            $state.go('newevent');\n        };\n    });\n","angular.module('rallly')\n    .controller('NavigationCtrl', function ($scope, $rootScope, $location, $document) {\n        $scope.isActive = function (path) {\n            if ($location.path() == path) {\n                return true;\n            } else {\n                return false\n            }\n        };\n\n\n        var clickHandler = function (event) {\n            var isClickedElementChildOfPopup = angular.element('.mobile-navigation').find(event.target).length > 0;\n            console.log(isClickedElementChildOfPopup);\n            if (isClickedElementChildOfPopup) return;\n            $scope.toggleMenu()\n        };\n\n        $rootScope.$on('$stateChangeSuccess', function () {\n            angular.element('body').removeClass('open-menu');\n            $document.unbind('click', clickHandler);\n        });\n\n        $scope.toggleMenu = function () {\n            console.log('click');\n            var isOpen = angular.element('body').hasClass('open-menu');\n            if (isOpen) {\n                angular.element('body').removeClass('open-menu');\n                $document.unbind('click', clickHandler);\n            } else {\n                angular.element('body').addClass('open-menu');\n                $document.bind('click', clickHandler);\n            }\n        }\n\n\n    });\n","angular.module('rallly')\n    .controller('NewEventCtrl', function ($scope, $http, $state, Event, ConfirmModal, Notification, Communicator) {\n\n        $scope.title = \"Schedule a New Event\";\n        $scope.description = \"Fill in the form below to create your event and share it with your friends and colleagues.\";\n        $scope.event = {\n            creator: {\n                allowNotifications: true\n            }\n        };\n\n        $scope.submit = function () {\n            if ($scope.form.$valid) {\n                var newEvent = new Event($scope.event);\n                newEvent.$save()\n                    .then(function (event) {\n                        _.forEach(event.dates, function(date) {\n                            date.raw_date = new Date(date.raw_date);\n                            _.forEach(date.possible_times, function(time) {\n                                time.start_time = new Date(time.start_time);\n                                time.end_time = new Date(time.end_time);\n                            });\n                        });\n\n                        $scope.event = event;\n                        $scope.eventUrl = $state.href('event', {\n                            id: $scope.event._id\n                        }, {\n                            absolute: true\n                        });\n                        Communicator.trigger('add:event', event);\n                        $state.go('newevent.success');\n                    }, function () {\n                        var modal = new ConfirmModal({\n                            title: 'Uh oh!',\n                            message: 'There was an error creating your event. Please try again later.',\n                            cancelText: 'OK'\n                        });\n                    });\n            } else {\n                var notification = new Notification({\n                    title: 'Hold on!',\n                    message: 'Make sure you fill in all the required fields and that your data is correct.'\n                });\n            }\n        };\n    });\n","angular.module('rallly')\n    .controller('VerificationCtrl', function (Event, Notification, $state) {\n        Event.verify({id: $state.params.id, code: $state.params.code}, function () {\n            var notification = new Notification({\n                title: 'Email Verified',\n                message: 'Your email has been verified. You will now be able to receive email notifications for this event',\n                type: 'success',\n                timeout: 5000\n            });\n        }, function (e) {\n            var notification = new Notification({\n                title: 'Verification Failed',\n                message: 'Your verification code has expired.',\n                type: 'error'\n            });\n        });\n        $state.go('event', {id: $state.params.id}, {\n            location: \"replace\"\n        });\n\n    });\n","angular.module('rallly')\n    .directive('backImg', function () {\n        return function (scope, element, attrs) {\n            var url = attrs.backImg;\n            element.css({\n                'background-image': 'url(/images/' + url + '.png)'\n            });\n        };\n    });\n","angular.module('rallly')\n    .directive('datepicker', function () {\n        return {\n            restrict: 'A',\n            require: 'ngModel',\n            scope: {\n                model: '=ngModel',\n                control: '='\n            },\n            templateUrl: 'templates/directives/datePicker.html',\n            link: function (scope, el, attrs, ngModel) {\n                scope.model = scope.model || [];\n                scope.control = scope.control || {};\n\n                scope.$watch('model', function (newValue) {\n                    ngModel.$setViewValue(newValue);\n                    ngModel.$validate();\n                }, true);\n\n                ngModel.$validators.required = function (modelValue, viewValue) {\n                    if (!modelValue || modelValue.length == 0) {\n                        return false;\n                    }\n                    return true;\n                };\n\n                var today = moment().startOf('day'), activeDate = today.clone();\n                var setMonth = function (toDate) {\n                    activeDate = moment(toDate);\n                    var startDate = activeDate.clone().startOf('month'), // get first day of active month\n                        startDateDOW = startDate.day(); // get day of the week for the active start date of the active month\n                    // Set the startDate to the previous Sunday\n                    if (startDateDOW == 0) {\n                        startDate.add(-7, 'days');\n                    } else {\n                        startDate.add(startDateDOW * -1, 'days');\n                    }\n                    scope.title = activeDate.format('MMMM YYYY');\n                    var days = new Array(42);\n                    for (var i = 0; i < days.length; i++) {\n                        var date = startDate.clone().add(i, 'days');\n                        days[i] = {\n                            date: date.toISOString(),\n                            isOutsideMonth: (date.month() != activeDate.month()) ? true : false,\n                            isToday: date.isSame(today)\n                        }\n                    }\n                    scope.days = days;\n                };\n                setMonth(activeDate.toISOString());\n                scope.selectDay = function (dayObj) {\n                    if (dayObj.isOutsideMonth) {\n                        setMonth(dayObj.date);\n                    }\n                    if ((index = scope.isActive(dayObj.date, true)) != -1) {\n                        // Already selected\n                        scope.model.splice(index, 1); // remove\n                    } else {\n                        // Not selected\n                        var index = 0, inserted = false;\n                        do {\n                            if (scope.model[index] == undefined || moment(scope.model[index].raw_date).isSame(moment(dayObj.date))) {\n                                var dateObject = {\n                                    raw_date: dayObj.date,\n                                    possible_times: [{\n                                        start_time: null,\n                                        end_time: null\n                                    }]\n                                };\n                                scope.model.splice(index, 0, dateObject);\n                                inserted = true;\n                            }\n                            index++;\n                        } while (inserted == false);\n                    }\n                };\n                scope.isActive = function (date, returnIndex) {\n                    date = moment(date);\n                    scope.model = scope.model || [];\n                    for (var i = 0; i < scope.model.length; i++) {\n                        var modelDate = moment(scope.model[i].raw_date);\n                        if (modelDate.date() === date.date() &&\n                            modelDate.month() === date.month() &&\n                            modelDate.year() === date.year()) {\n                            return (returnIndex) ? i : true;\n                        }\n                    }\n                    return (returnIndex) ? -1 : false;\n                };\n                scope.nextMonth = function () {\n                    setMonth(activeDate.clone().add(1, 'months').toISOString());\n                };\n                scope.prevMonth = function () {\n                    setMonth(activeDate.clone().add(-1, 'months').toISOString());\n                };\n\n                scope.control.removeDate = function (date) {\n                    if ((index = scope.isActive(Date.parse(date.raw_date), true)) != -1) {\n                        scope.model.splice(index, 1)\n                    }\n                }\n            }\n        }\n    });\n","angular.module('rallly')\n    .directive('discussion', function ($timeout, Comment, ConfirmModal, Communicator) {\n        return {\n            restrict: 'A',\n            templateUrl: 'templates/directives/discussion.html',\n            scope: {\n                'event': '='\n            },\n            controllerAs: 'discussionCtrl',\n            controller: function ($scope, $rootScope) {\n                $scope.comment = {author: {}, comment: ''};\n                $rootScope.$on('add:participant', function (e, event, participant) {\n                    $scope.comment.author.name = participant.name;\n                });\n                this.deleteComment = function (comment) {\n                    var modal = new ConfirmModal({\n                        title: 'Are you sure?',\n                        message: 'Are you sure you want to remove this comment?',\n                        confirmText: 'Yes - delete',\n                        cancelText: 'No - nevermind',\n                        isDestructive: true,\n                        confirm: function () {\n                            Comment.remove({id: $scope.event._id, cid: comment._id}, function (event) {\n                                $scope.event = event;\n                            });\n                        }\n                    });\n                };\n                this.postComment = function () {\n                    if ($scope.commentForm.$valid) {\n                        var comment = new Comment($scope.comment);\n                        comment.$save({id: $scope.event._id}, function (event) {\n                            $scope.event = event;\n                            Communicator.trigger('add:comment', event, $scope.comment);\n                            $scope.comment.content = '';\n                            $timeout($scope.scrollToBottom);\n                        });\n                        $scope.commentForm.$setPristine();\n                    }\n                };\n                $scope.scrollToBottom = function () {\n                    var thread = angular.element('.comment-thread');\n                    thread.scrollTop(thread.prop('scrollHeight'));\n                }\n            },\n            link: function (scope, el, attrs) {\n                $timeout(scope.scrollToBottom);\n            }\n        }\n    });\n","angular.module('rallly')\n    .directive('dropdown', function ($document) {\n        return {\n            restrict: 'A',\n            link: function (scope, el, attrs) {\n                el.addClass('dropdown');\n                scope.open = false;\n\n                var clickHandler = function (event) {\n                    var isClickedElementChildOfPopup = el.find(event.target).length > 0;\n                    if (isClickedElementChildOfPopup) return;\n                    scope.toggle();\n                };\n\n                scope.toggle = function () {\n                    scope.open = !scope.open;\n                    if (scope.open) {\n                        el.addClass('open');\n                        $document.bind('click', clickHandler);\n                    } else {\n                        el.removeClass('open');\n                        $document.unbind('click', clickHandler);\n                    }\n                }\n            }\n        }\n    });\n","angular.module('rallly')\n    .service('FormHelper', function () {\n        this.emailRegexString = '^([\\\\w-\\\\.]+@([\\\\w-]+\\\\.)+[\\\\w-]{2,4})?$';\n        this.emailRegex = new RegExp(this.emailRegexString);\n        this.prettyError = function (errors, field) {\n            if (errors.required) return field + \" is required\";\n            if (errors.pattern) return field + \" is invalid\";\n            if (errors.maxlength) return field + \" is too long\";\n            return false;\n        }\n    })\n    .directive('userForm', function (FormHelper) {\n        return {\n            scope: {\n                event: '=',\n                form: '='\n            },\n            templateUrl: 'templates/form/userForm.html',\n            link: function (scope, el, attrs) {\n                scope.errors = {};\n\n                scope.emailRegex = FormHelper.emailRegex;\n\n                scope.$watchCollection('form.name.$error', function (errors) {\n                    scope.errors.name = FormHelper.prettyError(errors, \"Name\");\n                });\n\n                scope.$watchCollection('form.email.$error', function (errors) {\n                    scope.errors.email = FormHelper.prettyError(errors, \"Email\");\n                });\n            }\n        }\n    })\n    .directive('eventForm', function (FormHelper) {\n        return {\n            scope: {\n                event: '=',\n                form: '='\n            },\n            templateUrl: 'templates/form/eventForm.html',\n            link: function (scope, el, attrs) {\n                scope.errors = {};\n\n                scope.$watchCollection('form.title.$error', function (errors) {\n                    scope.errors.title = FormHelper.prettyError(errors, \"Title\");\n                });\n\n                scope.$watchCollection('form.location.$error', function (errors) {\n                    scope.errors.location = FormHelper.prettyError(errors, \"Location\");\n                });\n\n            }\n        }\n    })\n    .directive('dateForm', function () {\n        return {\n            scope: {\n                event: '=',\n                form: '='\n            },\n            templateUrl: 'templates/form/dateForm.html'\n        }\n    })\n    .directive('timeForm', function () {\n        return {\n            scope: {\n                event: '=',\n                form: '='\n            },\n            templateUrl: 'templates/form/timeForm.html',\n            link: function (scope, el, attrs) {\n                var init = false;\n                var deregister = scope.$watch('event.dates', function (value) {\n                    if (value && !init) {\n                        deregister();\n                    }\n                    init = true;\n\n                    scope.unsetDate = function (dateToUnset) {\n                        var dateToUnset = new Date(dateToUnset.raw_date);\n\n                        _.remove(scope.event.dates, function (date) {\n                            var date = new Date(date.raw_date);\n                            return date.getTime() === dateToUnset.getTime();\n                        });\n                    };\n\n                    scope.addTime = function (date) {\n                        scope.event.dates[scope.event.dates.indexOf(date)].possible_times.push({});\n                    };\n\n                    scope.removeTime = function (time, date, index) {\n                        scope.event.dates[scope.event.dates.indexOf(date)].possible_times.splice(index, 1);\n                    }\n                });\n            }\n        }\n    })\n    .directive('timePicker', function ($timeout) {\n        return {\n            scope: {\n                model: '=ngModel'\n            },\n            require: 'ngModel',\n            link: function (scope, el, attrs, ngModel) {\n                ngModel.$viewChangeListeners.push(function () {\n                    scope.model = ngModel.$modelValue;\n                });\n\n                ngModel.$parsers.push(function (value) {\n                    if (!value) return;\n                    return Date.parse(value);\n                });\n\n                ngModel.$validators.time = function (modelValue, viewValue) {\n                    if (ngModel.$isEmpty(modelValue)) return true;\n                    var time = Date.parse(modelValue);\n                    if (time) {\n                        ngModel.$setViewValue(time.toString(\"hh:mm tt\"));\n                        ngModel.$render();\n                        return true;\n                    }\n                    return false;\n                }\n            }\n        }\n    })\n    .directive('participantsForm', function (FormHelper) {\n        return {\n            scope: {\n                event: '=',\n                form: '='\n            },\n            templateUrl: 'templates/form/participantsForm.html',\n            link: function (scope, el, attrs) {\n                scope.emailRegex = FormHelper.emailRegexString;\n            }\n        }\n    })\n    .directive('settingsForm', function (Event, ConfirmModal) {\n        return {\n            scope: {\n                event: '=',\n                form: '='\n            },\n            templateUrl: 'templates/form/settingsForm.html',\n            link: function (scope, el, attrs) {\n                scope.deleteEvent = function () {\n                    var modal = new ConfirmModal({\n                        title: 'Are you sure?',\n                        message: 'The event will no longer be accessible after it is deleted. Are you sure you want to continue?',\n                        isDestructive: true,\n                        confirmText: 'Yes - delete',\n                        cancelText: 'Cancel',\n                        confirm: function () {\n                            Event.delete({'id': scope.event._id}, function (e) {\n                                scope.event.isDeleted = true;\n                            });\n                        }\n                    });\n                }\n            }\n        }\n    })\n    .directive('switchToggle', function () {\n        return {\n            scope: {\n                model: '=ngModel'\n            },\n            require: 'ngModel',\n            link: function (scope, el, attrs, ngModel) {\n                el.addClass('switch-toggle');\n                var setClass = function () {\n                    if (scope.model ^ typeof(attrs.invert) !== 'undefined') {\n                        el.addClass('active');\n                    } else {\n                        el.removeClass('active');\n                    }\n                };\n                scope.$watch('model', setClass);\n                el.bind('click', function (e) {\n                    scope.model = !scope.model;\n                    ngModel.$setViewValue(scope.model, e);\n                });\n            }\n        }\n    });\n","angular.module('rallly')\n    .directive('poll', function ($timeout, Participant, Event, ConfirmModal, Communicator) {\n        return {\n            restrict: 'A',\n            templateUrl: 'templates/directives/poll.html',\n            $scope: {\n                'event': '='\n            },\n            controllerAs: 'pollCtrl',\n            controller: function ($scope, $rootScope) {\n                $scope.defaults = {};\n                $scope.participant = {};\n                $scope.participantVotes = {};\n                $rootScope.$on('add:comment', function (e, event, comment) {\n                    // Don't repopulate field if user has already voted\n                    if (!$scope.didVote) {\n                        $scope.participant.name = comment.author.name;\n                    }\n                });\n                this.toggleVote = function (time, participant) {\n                    if (!_.contains(time.voted_by, participant._id)) {\n                        time.voted_by.push(participant._id);\n                    } else {\n                        _.remove(time.voted_by, function (voter) {\n                            return voter.toString() === participant._id.toString();\n                        });\n                    }\n                };\n                this.hasVote = function (time, participant) {\n                    return _.contains(time.voted_by, participant._id);\n                };\n                this.delete = function (participant) {\n                    var modal = new ConfirmModal({\n                        title: 'Delete ' + participant.name + '?',\n                        message: 'Are you sure you want to remove ' + participant.name + ' from the poll?',\n                        confirmText: 'Yes - delete',\n                        cancelText: 'No - nevermind',\n                        isDestructive: true,\n                        confirm: function () {\n                            Participant.remove({id: $scope.event._id, pid: participant._id}, function (event) {\n                                $scope.event = event;\n                                Communicator.trigger('delete:participant', event);\n                            });\n                        }\n                    });\n                };\n                this.update = function () {\n                    Event.update({\n                        id: $scope.event._id\n                    }, $scope.event);\n                };\n                this.edit = function (participant) {\n                    _.forEach($scope.event.dates, function (date) {\n                        _.forEach(date.possible_times, function (time) {\n                            $scope.defaults[participant._id] = $scope.defaults[participant._id] || {};\n                            $scope.defaults[participant._id][date._id] = $scope.defaults[participant._id][date._id] || {};\n                            $scope.defaults[participant._id][date._id][time._id] = $scope.defaults[participant._id][date._id][time._id] || {};\n                            $scope.defaults[participant._id][date._id][time._id] = _.contains(time.voted_by, participant._id.toString());\n                        });\n                    });\n                };\n                this.cancel = function (participant) {\n                    _.forEach($scope.event.dates, function (date) {\n                        _.forEach(date.possible_times, function (time) {\n                            if ($scope.defaults[participant._id][date._id][time._id] !== _.contains(time.voted_by, participant._id.toString())) {\n                                $scope.pollCtrl.toggleVote(time, participant);\n                            }\n                        });\n                    });\n                };\n                this.save = function () {\n                    if ($scope.formnew.$valid) {\n                        var participant = new Participant($scope.participant);\n                        participant.$save({id: $scope.event._id}, function (event) {\n                            var currentParticipantIds = _.pluck($scope.event.participants, '_id');\n                            var newParticipantIds = _.pluck(event.participants, '_id');\n                            var newParticipant = _.difference(newParticipantIds, currentParticipantIds)[0];\n\n                            $scope.event = event;\n                            $scope.didVote = true;\n                            Communicator.trigger('add:participant', event, $scope.participant);\n\n                            _.forEach($scope.event.dates, function (date) {\n                                _.forEach(date.possible_times, function(time) {\n                                    if ($scope.participantVotes[date._id] &&  $scope.participantVotes[date._id][time._id]) {\n                                        time.voted_by.push(newParticipant);\n                                    }\n                                });\n                            });\n\n                            $scope.pollCtrl.update();\n                            $scope.participant = {};\n                            $scope.participantVotes = {};\n                        });\n\n                        $scope.formnew.$setPristine();\n                    }\n                };\n            },\n            link: function (scope, el, attrs, discussionCtrl) {\n                scope.event.$promise.then(function (event) {\n                    var examplesNames = ['John Example', 'Jane Specimen', 'Mark Instance', 'Mary Case'];\n                    var examples = [];\n                    for (var i = 0; i < examplesNames.length; i++) {\n                        var example = {name: examplesNames[i]};\n                        example.votes = [];\n                        for (var j = 0; j < event.dates.length; j++) {\n                            for (var k = 0; k <event.dates[j].possible_times.length; ++k) {\n                                var answer = Math.random() < .5;\n                                example.votes[j+k] = answer;\n                            }\n                        }\n                        examples.push(example);\n                    }\n                    scope.examples = examples;\n                });\n\n                scope.isTopDate = function (time) {\n                    var highest = scope.event.dates[0].possible_times[0].voted_by.length;\n                    for (var i = 0; i < scope.event.dates.length; ++i) {\n                        for (var j = 0; j < scope.event.dates[i].possible_times.length; ++j) {\n                            if (scope.event.dates[i].possible_times[j].voted_by.length > highest) {\n                                highest = scope.event.dates[i].possible_times[j].voted_by.length;\n                            }\n                        }\n                    }\n                    return time.voted_by.length === highest;\n                };\n\n                scope.numberVotes = function (time) {\n                    return time.voted_by.length;\n                };\n\n                scope.isTopDateExample = function (index) {\n                    var highest = scope.numberVotesExample(0);\n                    for (var i =0; i< scope.event.dates.length; ++i) {\n                        for (var j=0; j<scope.event.dates[i].possible_times.length; ++j) {\n                            var numVotes = scope.numberVotesExample(i+j);\n                            if (numVotes > highest) {\n                                highest = numVotes;\n                            }\n                        }\n                    }\n                    return highest === scope.numberVotesExample(index);\n                };\n\n                scope.numberVotesExample = function (index) {\n                    return _.filter(scope.examples, function(participant) {\n                        return participant.votes[index];\n                    }).length;\n                };\n            }\n        }\n    });\n","angular.module('rallly')\n    .filter('elapsed', function ($filter) {\n        return function (date) {\n            if (!date) return;\n            var time = Date.parse(date),\n                timeNow = new Date().getTime(),\n                difference = timeNow - time,\n                seconds = Math.floor(difference / 1000),\n                minutes = Math.floor(seconds / 60),\n                hours = Math.floor(minutes / 60),\n                days = Math.floor(hours / 24);\n            if (days > 30) {\n                return 'on ' + $filter('date')(date, 'MMMM d');\n            } else if (days > 1) {\n                return days + \" days ago\";\n            } else if (days == 1) {\n                return \"1 day ago\"\n            } else if (hours > 1) {\n                return hours + \" hours ago\";\n            } else if (hours == 1) {\n                return \"an hour ago\";\n            } else if (minutes > 1) {\n                return minutes + \" minutes ago\";\n            } else if (minutes == 1) {\n                return \"a minute ago\";\n            } else {\n                return \"a few seconds ago\";\n            }\n        }\n    })\n","angular.module('rallly')\n    .factory('Communicator', function ($rootScope) {\n        return new (function () {\n            this.trigger = function () {\n                $rootScope.$emit.apply($rootScope, arguments);\n            };\n            $rootScope.$on('view:event', function (e, data) {\n                mixpanel.track('View Event', {\n                    id: data._id,\n                    participants: data.participants.length,\n                    comments: data.comments.length,\n                    isExample: data.isExample,\n                    dates: data.dates.length\n                });\n            });\n\n            $rootScope.$on('add:participant', function (e, event, participant) {\n                mixpanel.track('Add Participant', {\n                    id: event._id\n                })\n            });\n\n            $rootScope.$on('add:comment', function (e, event, comment) {\n                mixpanel.track('Add Comment', {\n                    id: event._id\n                })\n            });\n\n            $rootScope.$on('add:event', function (e, data) {\n                mixpanel.track('Add Event', {\n                    id: data._id,\n                    participants: data.participants.length,\n                    comments: data.comments.length,\n                    isExample: data.isExample,\n                    dates: data.dates.length\n                })\n            })\n\n        })();\n    });\n","angular.module('rallly')\n    .factory('ConfirmModal', function (btfModal) {\n\n        return function (config) {\n            var modal;\n            modal = btfModal({\n                templateUrl: 'templates/confirmmodal.html',\n                controllerAs: 'modal',\n                controller: function () {\n                    this.title = config.title\n                    this.message = config.message;\n                    this.confirm = (config.confirm) ? function () {\n                        config.confirm();\n                        modal.deactivate()\n                    } : false;\n                    this.cancel = modal.deactivate;\n                    this.confirmText = config.confirmText || 'Confirm';\n                    this.cancelText = config.cancelText || 'Cancel';\n                    this.isDestructive = config.isDestructive;\n                }\n            });\n            modal.activate();\n\n            this.destroy = function () {\n                modal.deactivate();\n            }\n        }\n    });\n","angular.module('rallly')\n    .factory('Notification', function ($timeout, btfModal) {\n        return function (config) {\n            var modal;\n            modal = btfModal({\n                templateUrl: 'templates/notification.html',\n                controllerAs: 'notification',\n                controller: function () {\n                    this.title = config.title;\n                    this.message = config.message;\n                    this.close = modal.deactivate;\n                    this.type = config.type;\n                    var timeout = config.timeout || 5000;\n                    $timeout(modal.deactivate, timeout);\n                }\n            });\n            modal.activate();\n\n            this.destroy = function () {\n                modal.deactivate();\n            };\n        }\n    });\n"],"sourceRoot":"/source/"}